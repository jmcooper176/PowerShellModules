<#
 =============================================================================
<copyright file="AzureRM.Example.psm1" company="John Merryweather Cooper
">
    Copyright © 2022, 2023, 2024, 2025, John Merryweather Cooper.
    All Rights Reserved.

    Redistribution and use in source and binary forms, with or without
    modification, are permitted provided that the following conditions
    are met:

       1. Redistributions of source code must retain the above
          copyright notice, this list of conditions and the following
          disclaimer.

       2. Redistributions in binary form must reproduce the above
          copyright notice, this list of conditions and the following
          disclaimer in the documentation and/or other materials
          provided with the distribution.

       3. Neither the name of the copyright holder nor the names of
          its contributors may be used to endorse or promote products
          derived from this software without specific prior written
          permission.

   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
   "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
   FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
   COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
   CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
   LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
   ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
   POSSIBILITY OF SUCH DAMAGE.
</copyright>
<author>John Merryweather Cooper</author>
<date>Created:  2024-9-18</date>
<summary>
This file "AzureRM.Example.psm1" is part of "AzurePipelineModule".
</summary>
<remarks>description</remarks>
=============================================================================
#>

#
# Script module for module '%MODULE-NAME%' that is executed when '%MODULE-NAME%' is imported in a PowerShell session.
#
# Generated by: Microsoft Corporation
#
# Generated on: %DATE%
#

$ScriptName = Initialize-PSScript -MyInvocation $MyInvocation

$PSDefaultParameterValues.Clear()

function Test-DotNet {
    [CmdletBinding()]
    param ()

    $CmdletName = Initialize-PSCmdlet -MyInvocation $MyInvocation

    try {
        if ((Get-PSDrive 'HKLM' -ErrorAction Ignore) -and (Get-ChildItem 'HKLM:\SOFTWARE\Microsoft\NET Framework Setup\NDP\v4\Full\' -ErrorAction Stop | Get-ItemProperty -Name Release -ErrorAction Stop | Where-Object -FilterScript { $_ -lt 461808 })) {
            throw ".NET Framework versions lower than 4.7.2 are not supported in Az. Please upgrade to .NET Framework 4.7.2 or higher."
        }
    }
    catch [System.Management.Automation.DriveNotFoundException] {
        Write-Verbose ".NET Framework version check failed."
    }
}

function Import-Assembly {
    [CmdletBinding()]
    param (
        [ParameterDirectory(Mandatory)]
        [ValidateScript({ Test-Path -LiteralPath $_ -PathType Container },
            ErrorMessage = "AssemblyDirectory '{0}' is not a valid path container")]
        [string]
        $AssemblyDirectory
    )

    $CmdletName = Initialize-PSCmdlet -MyInvocation $MyInvocation

    if ($PSEdition -eq 'Desktop') {
        try {
            Get-ChildItem -ErrorAction Stop -LiteralPath $AssemblyDirectory -Filter "*.dll" | ForEach-Object -Process {
                try {
                    Add-Type -Path $_.FullName -ErrorAction Ignore | Out-Null
                }
                catch {
                    Write-Verbose -Message $_
                }
            }
        }
        catch {
            $Error | ForEach-Object -Process { Write-Error -ErrorRecord @_ -ErrorAction Continue }
        }
    }
}

if (%ISAZMODULE% -and ($PSEdition -eq 'Desktop')) {
    if ($PSVersionTable.PSVersion -lt [Version]'5.1') {
        throw "PowerShell versions lower than 5.1 are not supported in Az. Please upgrade to PowerShell 5.1 or higher."
    }

    Test-DotNet
}

%AZURECOREPREREQUISITE%

if (Test-Path -LiteralPath "$PSScriptRoot\StartupScripts" -PathType Container) {
    Get-ChildItem -LiteralPath "$PSScriptRoot\StartupScripts" -ErrorAction Stop | ForEach-Object -Process {
        . $_.FullName
    }
}

# [windows powershell] preload assemblies
%PRELOAD-ASSEMBLY%

# [windows powershell] preload module alc assemblies
$preloadPath = (Join-Path -Path $PSScriptRoot -ChildPath "ModuleAlcAssemblies")
Import-Assembly -AssemblyDirectory $preloadPath

if (Get-Module %AZORAZURERM%.profile -ErrorAction Ignore) {
    Write-Warning -Message ("%AZORAZURERM%.Profile already loaded. Az and AzureRM modules cannot be imported in the same session or used in the same script or runbook. If you are running PowerShell in an environment you control you can use the 'Uninstall-AzureRm' cmdlet to remove all AzureRm modules from your machine. " +
        "If you are running in Azure Automation, take care that none of your runbooks import both Az and AzureRM modules. More information can be found here: https://aka.ms/azps-migration-guide.")
    throw ("%AZORAZURERM%.Profile already loaded. Az and AzureRM modules cannot be imported in the same session or used in the same script or runbook. If you are running PowerShell in an environment you control you can use the 'Uninstall-AzureRm' cmdlet to remove all AzureRm modules from your machine. " +
        "If you are running in Azure Automation, take care that none of your runbooks import both Az and AzureRM modules. More information can be found here: https://aka.ms/azps-migration-guide.")
}

%IMPORTED-DEPENDENCIES%

if (Test-Path -LiteralPath "$PSScriptRoot\PostImportScripts" -PathType Container) {
    Get-ChildItem -LiteralPath "$PSScriptRoot\PostImportScripts" -ErrorAction Stop | ForEach-Object -Process {
        . $_.FullName
    }
}

$FilteredCommands = %DEFAULTRGCOMMANDS%

if ($null -eq $Env:ACC_CLOUD) {
    $FilteredCommands | ForEach-Object -Process {
        $existingDefault = $false

        $global:PSDefaultParameterValues.Keys | ForEach-Object -Process {
            if ($_ -like "$key") {
                $existingDefault = $true
            }
        }

        if (!$existingDefault) {
            $global:PSDefaultParameterValues.Add($_,
                {
                    if ((Get-Command -All | Where-Object -Property Name -EQ Get-AzContext)) {
                        $context = Get-AzureRmContext
                    }
                    else {
                        $context = Get-AzContext
                    }

                    if (($null -ne $context) -and $context.ExtendedProperties.ContainsKey("Default Resource Group")) {
                        $context.ExtendedProperties["Default Resource Group"]
                    }
                })
        }
    }
}

%COMMAND-NOT-FOUND%
